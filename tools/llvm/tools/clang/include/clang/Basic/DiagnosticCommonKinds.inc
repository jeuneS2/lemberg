#ifdef COMMONSTART
__COMMONSTART = DIAG_START_COMMON,
#undef COMMONSTART
#endif

DIAG(err_cannot_open_file, CLASS_ERROR, diag::MAP_FATAL, "cannot open file '%0': %1", 0, true, false, false, false, 0)
DIAG(err_default_special_members, CLASS_ERROR, diag::MAP_ERROR, "only special member functions may be defaulted", 0, true, false, false, false, 0)
DIAG(err_deleted_non_function, CLASS_ERROR, diag::MAP_ERROR, "only functions can have deleted definitions", 0, true, false, false, false, 0)
DIAG(err_expected_colon, CLASS_ERROR, diag::MAP_ERROR, "expected ':'", 0, true, false, false, false, 0)
DIAG(err_expected_colon_after_setter_name, CLASS_ERROR, diag::MAP_ERROR, "method name referenced in property setter attribute must end with ':'", 0, true, false, false, false, 0)
DIAG(err_expected_namespace_name, CLASS_ERROR, diag::MAP_ERROR, "expected namespace name", 0, true, false, false, false, 0)
DIAG(err_file_modified, CLASS_ERROR, diag::MAP_FATAL, "file '%0' modified since it was first processed", 0, true, false, false, false, 0)
DIAG(err_invalid_character_udl, CLASS_ERROR, diag::MAP_ERROR, "character literal with user-defined suffix cannot be used here", 0, true, false, false, false, 0)
DIAG(err_invalid_numeric_udl, CLASS_ERROR, diag::MAP_ERROR, "numeric literal with user-defined suffix cannot be used here", 0, true, false, false, false, 0)
DIAG(err_invalid_storage_class_in_func_decl, CLASS_ERROR, diag::MAP_ERROR, "invalid storage class specifier in function declarator", 0, true, false, false, false, 0)
DIAG(err_invalid_string_udl, CLASS_ERROR, diag::MAP_ERROR, "string literal with user-defined suffix cannot be used here", 0, true, false, false, false, 0)
DIAG(err_module_cycle, CLASS_ERROR, diag::MAP_FATAL, "cyclic dependency in module '%0': %1", 0, true, false, false, false, 0)
DIAG(err_module_not_built, CLASS_ERROR, diag::MAP_FATAL, "could not build module '%0'", 0, true, false, false, false, 0)
DIAG(err_module_not_found, CLASS_ERROR, diag::MAP_FATAL, "module '%0' not found", 0, true, false, false, false, 0)
DIAG(err_param_redefinition, CLASS_ERROR, diag::MAP_ERROR, "redefinition of parameter %0", 0, true, false, false, false, 0)
DIAG(err_target_invalid_feature, CLASS_ERROR, diag::MAP_ERROR, "invalid target feature '%0'", 0, true, false, false, false, 0)
DIAG(err_target_unknown_abi, CLASS_ERROR, diag::MAP_ERROR, "unknown target ABI '%0'", 0, true, false, false, false, 0)
DIAG(err_target_unknown_cpu, CLASS_ERROR, diag::MAP_ERROR, "unknown target CPU '%0'", 0, true, false, false, false, 0)
DIAG(err_target_unknown_cxxabi, CLASS_ERROR, diag::MAP_ERROR, "unknown C++ ABI '%0'", 0, true, false, false, false, 0)
DIAG(err_target_unknown_triple, CLASS_ERROR, diag::MAP_ERROR, "unknown target triple '%0', please use -triple or -arch", 0, true, false, false, false, 0)
DIAG(err_unsupported_bom, CLASS_ERROR, diag::MAP_FATAL, "%0 byte order mark detected in '%1', but encoding is not supported", 0, true, false, false, false, 0)
DIAG(ext_longlong, CLASS_EXTENSION, diag::MAP_IGNORE, "'long long' is an extension when C99 mode is not enabled", 149, true, false, false, false, 0)
DIAG(ext_no_declarators, CLASS_EXTENSION, diag::MAP_WARNING, "declaration does not declare anything", 159, true, false, false, false, 0)
DIAG(ext_variadic_templates, CLASS_EXTENSION, diag::MAP_WARNING, "variadic templates are a C++11 extension", 42, true, false, false, false, 0)
DIAG(fatal_too_many_errors, CLASS_ERROR, diag::MAP_FATAL, "too many errors emitted, stopping now", 0, true, false, false, false, 0)
DIAG(note_also_found, CLASS_NOTE, diag::MAP_FATAL, "also found", 0, true, false, false, false, 0)
DIAG(note_declared_at, CLASS_NOTE, diag::MAP_FATAL, "declared here", 0, true, false, false, false, 0)
DIAG(note_duplicate_case_prev, CLASS_NOTE, diag::MAP_FATAL, "previous case defined here", 0, true, false, false, false, 0)
DIAG(note_forward_declaration, CLASS_NOTE, diag::MAP_FATAL, "forward declaration of %0", 0, true, false, false, false, 0)
DIAG(note_invalid_subexpr_in_const_expr, CLASS_NOTE, diag::MAP_FATAL, "subexpression not valid in a constant expression", 0, true, false, false, false, 0)
DIAG(note_matching, CLASS_NOTE, diag::MAP_FATAL, "to match this '%0'", 0, true, false, false, false, 0)
DIAG(note_possibility, CLASS_NOTE, diag::MAP_FATAL, "one possibility", 0, true, false, false, false, 0)
DIAG(note_pragma_entered_here, CLASS_NOTE, diag::MAP_FATAL, "#pragma entered here", 0, true, false, false, false, 0)
DIAG(note_previous_declaration, CLASS_NOTE, diag::MAP_FATAL, "previous declaration is here", 0, true, false, false, false, 0)
DIAG(note_previous_definition, CLASS_NOTE, diag::MAP_FATAL, "previous definition is here", 0, true, false, false, false, 0)
DIAG(note_previous_implicit_declaration, CLASS_NOTE, diag::MAP_FATAL, "previous implicit declaration is here", 0, true, false, false, false, 0)
DIAG(note_previous_use, CLASS_NOTE, diag::MAP_FATAL, "previous use is here", 0, true, false, false, false, 0)
DIAG(note_type_being_defined, CLASS_NOTE, diag::MAP_FATAL, "definition of %0 is not complete until the closing '}'", 0, true, false, false, false, 0)
DIAG(note_using, CLASS_NOTE, diag::MAP_FATAL, "using", 0, true, false, false, false, 0)
DIAG(warn_cxx98_compat_longlong, CLASS_WARNING, diag::MAP_IGNORE, "'long long' is incompatible with C++98", 47, true, false, false, false, 0)
DIAG(warn_cxx98_compat_variadic_templates, CLASS_WARNING, diag::MAP_IGNORE, "variadic templates are incompatible with C++98", 44, true, false, false, false, 0)
DIAG(warn_integer_too_large, CLASS_WARNING, diag::MAP_WARNING, "integer constant is too large for its type", 0, true, false, false, false, 0)
DIAG(warn_integer_too_large_for_signed, CLASS_WARNING, diag::MAP_WARNING, "integer constant is so large that it is unsigned", 0, true, false, false, false, 0)
DIAG(warn_method_param_declaration, CLASS_WARNING, diag::MAP_IGNORE, "redeclaration of method parameter %0", 86, true, false, false, false, 0)
DIAG(warn_method_param_redefinition, CLASS_WARNING, diag::MAP_WARNING, "redefinition of method parameter %0", 0, true, false, false, false, 0)
DIAG(warn_module_build, CLASS_WARNING, diag::MAP_IGNORE, "building module '%0' from source", 166, true, false, false, false, 0)
