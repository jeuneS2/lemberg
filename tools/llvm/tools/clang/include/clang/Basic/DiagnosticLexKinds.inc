#ifdef LEXSTART
__LEXSTART = DIAG_START_LEX,
#undef LEXSTART
#endif

DIAG(backslash_newline_space, CLASS_WARNING, diag::MAP_WARNING, "backslash and newline separated by space", 27, true, false, false, false, 1)
DIAG(err__Pragma_malformed, CLASS_ERROR, diag::MAP_ERROR, "_Pragma takes a parenthesized string literal", 0, true, false, false, false, 1)
DIAG(err_bad_character_encoding, CLASS_ERROR, diag::MAP_ERROR, "illegal character encoding in character literal", 0, true, false, false, false, 1)
DIAG(err_bad_string_encoding, CLASS_ERROR, diag::MAP_ERROR, "illegal character encoding in string literal", 0, true, false, false, false, 1)
DIAG(err_character_too_large, CLASS_ERROR, diag::MAP_ERROR, "character too large for enclosing character literal type", 0, true, false, false, false, 1)
DIAG(err_conflict_marker, CLASS_ERROR, diag::MAP_ERROR, "version control conflict marker in file", 0, true, false, false, false, 1)
DIAG(err_defined_macro_name, CLASS_ERROR, diag::MAP_ERROR, "'defined' cannot be used as a macro name", 0, true, false, false, false, 1)
DIAG(err_embedded_include, CLASS_ERROR, diag::MAP_ERROR, "embedding a #%0 directive within macro arguments is not supported", 0, true, false, false, false, 1)
DIAG(err_empty_character, CLASS_ERROR, diag::MAP_ERROR, "empty character constant", 0, true, false, false, false, 1)
DIAG(err_exponent_has_no_digits, CLASS_ERROR, diag::MAP_ERROR, "exponent has no digits", 0, true, false, false, false, 1)
DIAG(err_feature_check_malformed, CLASS_ERROR, diag::MAP_ERROR, "builtin feature check macro requires a parenthesized identifier", 0, true, false, false, false, 1)
DIAG(err_hex_escape_no_digits, CLASS_ERROR, diag::MAP_ERROR, "\\x used with no following hex digits", 0, true, false, false, false, 1)
DIAG(err_hexconstant_requires_digits, CLASS_ERROR, diag::MAP_ERROR, "hexadecimal floating constants require a significand", 0, true, false, false, false, 1)
DIAG(err_hexconstant_requires_exponent, CLASS_ERROR, diag::MAP_ERROR, "hexadecimal floating constants require an exponent", 0, true, false, false, false, 1)
DIAG(err_invalid_binary_digit, CLASS_ERROR, diag::MAP_ERROR, "invalid digit '%0' in binary constant", 0, true, false, false, false, 1)
DIAG(err_invalid_char_raw_delim, CLASS_ERROR, diag::MAP_ERROR, "invalid character '%0' character in raw string delimiter; use PREFIX( )PREFIX to delimit raw string", 0, true, false, false, false, 1)
DIAG(err_invalid_character_to_charify, CLASS_ERROR, diag::MAP_ERROR, "invalid argument to convert to character", 0, true, false, false, false, 1)
DIAG(err_invalid_decimal_digit, CLASS_ERROR, diag::MAP_ERROR, "invalid digit '%0' in decimal constant", 0, true, false, false, false, 1)
DIAG(err_invalid_octal_digit, CLASS_ERROR, diag::MAP_ERROR, "invalid digit '%0' in octal constant", 0, true, false, false, false, 1)
DIAG(err_invalid_pth_file, CLASS_ERROR, diag::MAP_ERROR, "invalid or corrupt PTH file '%0'", 0, true, false, false, false, 1)
DIAG(err_invalid_suffix_float_constant, CLASS_ERROR, diag::MAP_ERROR, "invalid suffix '%0' on floating constant", 0, true, false, false, false, 1)
DIAG(err_invalid_suffix_integer_constant, CLASS_ERROR, diag::MAP_ERROR, "invalid suffix '%0' on integer constant", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_attribute, CLASS_ERROR, diag::MAP_ERROR, "expected an attribute name", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_export_wildcard, CLASS_ERROR, diag::MAP_ERROR, "only '*' can be exported from an inferred submodule", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_feature, CLASS_ERROR, diag::MAP_ERROR, "expected a feature name", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_header, CLASS_ERROR, diag::MAP_ERROR, "expected a header name after '%0'", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_lbrace, CLASS_ERROR, diag::MAP_ERROR, "expected '{' to start module '%0'", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_lbrace_wildcard, CLASS_ERROR, diag::MAP_ERROR, "expected '{' to start inferred submodule", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_member, CLASS_ERROR, diag::MAP_ERROR, "expected umbrella, header, submodule, or module export", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_module, CLASS_ERROR, diag::MAP_ERROR, "expected module declaration", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_module_name, CLASS_ERROR, diag::MAP_ERROR, "expected module name", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_rbrace, CLASS_ERROR, diag::MAP_ERROR, "expected '}'", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_rsquare, CLASS_ERROR, diag::MAP_ERROR, "expected ']' to close attribute", 0, true, false, false, false, 1)
DIAG(err_mmap_expected_wildcard_member, CLASS_ERROR, diag::MAP_ERROR, "expected module export wildcard", 0, true, false, false, false, 1)
DIAG(err_mmap_explicit_top_level, CLASS_ERROR, diag::MAP_ERROR, "'explicit' is not permitted on top-level modules", 0, true, false, false, false, 1)
DIAG(err_mmap_export_module_id, CLASS_ERROR, diag::MAP_ERROR, "expected an exported module name or '*'", 0, true, false, false, false, 1)
DIAG(err_mmap_header_conflict, CLASS_ERROR, diag::MAP_ERROR, "header '%0' is already part of module '%1'", 0, true, false, false, false, 1)
DIAG(err_mmap_header_not_found, CLASS_ERROR, diag::MAP_ERROR, "%select{|umbrella }0header '%1' not found", 0, true, false, false, false, 1)
DIAG(err_mmap_inferred_no_umbrella, CLASS_ERROR, diag::MAP_ERROR, "inferred submodules require a module with an umbrella", 0, true, false, false, false, 1)
DIAG(err_mmap_inferred_redef, CLASS_ERROR, diag::MAP_ERROR, "redefinition of inferred submodule", 0, true, false, false, false, 1)
DIAG(err_mmap_missing_module_qualified, CLASS_ERROR, diag::MAP_ERROR, "no module named '%0' in '%1'", 0, true, false, false, false, 1)
DIAG(err_mmap_missing_module_unqualified, CLASS_ERROR, diag::MAP_ERROR, "no module named '%0' visible from '%1'", 0, true, false, false, false, 1)
DIAG(err_mmap_module_redefinition, CLASS_ERROR, diag::MAP_ERROR, "redefinition of module '%0'", 0, true, false, false, false, 1)
DIAG(err_mmap_nested_submodule_id, CLASS_ERROR, diag::MAP_ERROR, "qualified module name can only be used to define modules at the top level", 0, true, false, false, false, 1)
DIAG(err_mmap_top_level_inferred_submodule, CLASS_ERROR, diag::MAP_ERROR, "only submodules may be inferred with wildcard syntax", 0, true, false, false, false, 1)
DIAG(err_mmap_umbrella_clash, CLASS_ERROR, diag::MAP_ERROR, "umbrella for module '%0' already covers this directory", 0, true, false, false, false, 1)
DIAG(err_mmap_umbrella_dir_not_found, CLASS_ERROR, diag::MAP_ERROR, "umbrella directory '%0' not found", 0, true, false, false, false, 1)
DIAG(err_mmap_unknown_token, CLASS_ERROR, diag::MAP_ERROR, "skipping stray token", 0, true, false, false, false, 1)
DIAG(err_multichar_utf_character_literal, CLASS_ERROR, diag::MAP_ERROR, "Unicode character literals may not contain multiple characters", 0, true, false, false, false, 1)
DIAG(err_pascal_string_too_long, CLASS_ERROR, diag::MAP_ERROR, "Pascal string is too long", 0, true, false, false, false, 1)
DIAG(err_paste_at_end, CLASS_ERROR, diag::MAP_ERROR, "'##' cannot appear at end of macro expansion", 0, true, false, false, false, 1)
DIAG(err_paste_at_start, CLASS_ERROR, diag::MAP_ERROR, "'##' cannot appear at start of macro expansion", 0, true, false, false, false, 1)
DIAG(err_pp_arc_cf_code_audited_syntax, CLASS_ERROR, diag::MAP_ERROR, "expected 'begin' or 'end'", 0, true, false, false, false, 1)
DIAG(err_pp_bad_paste, CLASS_ERROR, diag::MAP_ERROR, "pasting formed '%0', an invalid preprocessing token", 0, true, false, false, false, 1)
DIAG(err_pp_bad_paste_ms, CLASS_WARNING, diag::MAP_ERROR, "pasting formed '%0', an invalid preprocessing token", 140, true, false, false, false, 1)
DIAG(err_pp_colon_without_question, CLASS_ERROR, diag::MAP_ERROR, "':' without preceding '?'", 0, true, false, false, false, 1)
DIAG(err_pp_defined_requires_identifier, CLASS_ERROR, diag::MAP_ERROR, "operator 'defined' requires an identifier", 0, true, false, false, false, 1)
DIAG(err_pp_division_by_zero, CLASS_ERROR, diag::MAP_ERROR, "division by zero in preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_double_begin_of_arc_cf_code_audited, CLASS_ERROR, diag::MAP_ERROR, "already inside '#pragma clang arc_cf_code_audited'", 0, true, false, false, false, 1)
DIAG(err_pp_duplicate_name_in_arg_list, CLASS_ERROR, diag::MAP_ERROR, "duplicate macro parameter name %0", 0, true, false, false, false, 1)
DIAG(err_pp_empty_filename, CLASS_ERROR, diag::MAP_ERROR, "empty filename", 0, true, false, false, false, 1)
DIAG(err_pp_endif_without_if, CLASS_ERROR, diag::MAP_ERROR, "#endif without #if", 0, true, false, false, false, 1)
DIAG(err_pp_eof_in_arc_cf_code_audited, CLASS_ERROR, diag::MAP_ERROR, "'#pragma clang arc_cf_code_audited' was not ended within this file", 0, true, false, false, false, 1)
DIAG(err_pp_error_opening_file, CLASS_ERROR, diag::MAP_FATAL, "error opening file '%0': %1", 0, true, false, false, false, 1)
DIAG(err_pp_expected_comma_in_arg_list, CLASS_ERROR, diag::MAP_ERROR, "expected comma in macro parameter list", 0, true, false, false, false, 1)
DIAG(err_pp_expected_eol, CLASS_ERROR, diag::MAP_ERROR, "expected end of line in preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_expected_ident_in_arg_list, CLASS_ERROR, diag::MAP_ERROR, "expected identifier in macro parameter list", 0, true, false, false, false, 1)
DIAG(err_pp_expected_rparen, CLASS_ERROR, diag::MAP_ERROR, "expected ')' in preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_expected_value_in_expr, CLASS_ERROR, diag::MAP_ERROR, "expected value in expression", 0, true, false, false, false, 1)
DIAG(err_pp_expects_filename, CLASS_ERROR, diag::MAP_ERROR, "expected \"FILENAME\" or <FILENAME>", 0, true, false, false, false, 1)
DIAG(err_pp_expr_bad_token_binop, CLASS_ERROR, diag::MAP_ERROR, "token is not a valid binary operator in a preprocessor subexpression", 0, true, false, false, false, 1)
DIAG(err_pp_expr_bad_token_start_expr, CLASS_ERROR, diag::MAP_ERROR, "invalid token at start of a preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_file_not_found, CLASS_ERROR, diag::MAP_FATAL, "'%0' file not found", 0, true, false, false, false, 1)
DIAG(err_pp_hash_error, CLASS_ERROR, diag::MAP_ERROR, "%0", 0, true, false, false, false, 13)
DIAG(err_pp_illegal_floating_literal, CLASS_ERROR, diag::MAP_ERROR, "floating point literal in preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_import_directive_ms, CLASS_ERROR, diag::MAP_ERROR, "#import of type library is an unsupported Microsoft feature", 0, true, false, false, false, 1)
DIAG(err_pp_include_in_arc_cf_code_audited, CLASS_ERROR, diag::MAP_ERROR, "cannot #include files inside '#pragma clang arc_cf_code_audited'", 0, true, false, false, false, 1)
DIAG(err_pp_include_too_deep, CLASS_ERROR, diag::MAP_ERROR, "#include nested too deeply", 0, true, false, false, false, 1)
DIAG(err_pp_invalid_directive, CLASS_ERROR, diag::MAP_ERROR, "invalid preprocessing directive", 0, true, false, false, false, 1)
DIAG(err_pp_invalid_poison, CLASS_ERROR, diag::MAP_ERROR, "can only poison identifier tokens", 0, true, false, false, false, 1)
DIAG(err_pp_invalid_tok_in_arg_list, CLASS_ERROR, diag::MAP_ERROR, "invalid token in macro parameter list", 0, true, false, false, false, 1)
DIAG(err_pp_invalid_udl, CLASS_ERROR, diag::MAP_ERROR, "%select{character|integer}0 literal with user-defined suffix cannot be used in preprocessor constant expression", 0, true, false, false, false, 1)
DIAG(err_pp_line_digit_sequence, CLASS_ERROR, diag::MAP_ERROR, "#line directive requires a simple digit sequence", 0, true, false, false, false, 1)
DIAG(err_pp_line_invalid_filename, CLASS_ERROR, diag::MAP_ERROR, "invalid filename for #line directive", 0, true, false, false, false, 1)
DIAG(err_pp_line_requires_integer, CLASS_ERROR, diag::MAP_ERROR, "#line directive requires a positive integer argument", 0, true, false, false, false, 1)
DIAG(err_pp_linemarker_invalid_filename, CLASS_ERROR, diag::MAP_ERROR, "invalid filename for line marker directive", 0, true, false, false, false, 1)
DIAG(err_pp_linemarker_invalid_flag, CLASS_ERROR, diag::MAP_ERROR, "invalid flag line marker directive", 0, true, false, false, false, 1)
DIAG(err_pp_linemarker_invalid_pop, CLASS_ERROR, diag::MAP_ERROR, "invalid line marker flag '2': cannot pop empty include stack", 0, true, false, false, false, 1)
DIAG(err_pp_linemarker_requires_integer, CLASS_ERROR, diag::MAP_ERROR, "line marker directive requires a positive integer argument", 0, true, false, false, false, 1)
DIAG(err_pp_macro_not_identifier, CLASS_ERROR, diag::MAP_ERROR, "macro names must be identifiers", 0, true, false, false, false, 1)
DIAG(err_pp_malformed_ident, CLASS_ERROR, diag::MAP_ERROR, "invalid #ident directive", 0, true, false, false, false, 1)
DIAG(err_pp_missing_lparen, CLASS_ERROR, diag::MAP_ERROR, "missing '(' after '%0'", 0, true, false, false, false, 1)
DIAG(err_pp_missing_macro_name, CLASS_ERROR, diag::MAP_ERROR, "macro name missing", 0, true, false, false, false, 1)
DIAG(err_pp_missing_rparen, CLASS_ERROR, diag::MAP_ERROR, "missing ')' after '%0'", 0, true, false, false, false, 1)
DIAG(err_pp_missing_rparen_in_macro_def, CLASS_ERROR, diag::MAP_ERROR, "missing ')' in macro parameter list", 0, true, false, false, false, 1)
DIAG(err_pp_operator_used_as_macro_name, CLASS_ERROR, diag::MAP_ERROR, "C++ operator '%0' cannot be used as a macro name", 0, true, false, false, false, 1)
DIAG(err_pp_remainder_by_zero, CLASS_ERROR, diag::MAP_ERROR, "remainder by zero in preprocessor expression", 0, true, false, false, false, 1)
DIAG(err_pp_stringize_not_parameter, CLASS_ERROR, diag::MAP_ERROR, "'#' is not followed by a macro parameter", 0, true, false, false, false, 1)
DIAG(err_pp_unmatched_end_of_arc_cf_code_audited, CLASS_ERROR, diag::MAP_ERROR, "not currently inside '#pragma clang arc_cf_code_audited'", 0, true, false, false, false, 1)
DIAG(err_pp_unterminated_conditional, CLASS_ERROR, diag::MAP_ERROR, "unterminated conditional directive", 0, true, false, false, false, 1)
DIAG(err_pp_used_poisoned_id, CLASS_ERROR, diag::MAP_ERROR, "attempt to use a poisoned identifier", 0, true, false, false, false, 1)
DIAG(err_pp_visibility_non_macro, CLASS_ERROR, diag::MAP_ERROR, "no macro named %0", 0, true, false, false, false, 1)
DIAG(err_pragma_comment_malformed, CLASS_ERROR, diag::MAP_ERROR, "pragma comment requires parenthesized identifier and optional string", 0, true, false, false, false, 1)
DIAG(err_pragma_comment_unknown_kind, CLASS_ERROR, diag::MAP_ERROR, "unknown kind of pragma comment", 0, true, false, false, false, 1)
DIAG(err_pragma_message_malformed, CLASS_ERROR, diag::MAP_ERROR, "pragma message requires parenthesized string", 0, true, false, false, false, 1)
DIAG(err_pragma_push_pop_macro_malformed, CLASS_ERROR, diag::MAP_ERROR, "pragma %0 requires a parenthesized string", 0, true, false, false, false, 1)
DIAG(err_raw_delim_too_long, CLASS_ERROR, diag::MAP_ERROR, "raw string delimiter longer than 16 characters; use PREFIX( )PREFIX to delimit raw string", 0, true, false, false, false, 1)
DIAG(err_string_concat_mixed_suffix, CLASS_ERROR, diag::MAP_ERROR, "differing user-defined suffixes ('%0' and '%1') in string literal concatenation", 0, true, false, false, false, 1)
DIAG(err_too_few_args_in_macro_invoc, CLASS_ERROR, diag::MAP_ERROR, "too few arguments provided to function-like macro invocation", 0, true, false, false, false, 1)
DIAG(err_too_many_args_in_macro_invoc, CLASS_ERROR, diag::MAP_ERROR, "too many arguments provided to function-like macro invocation", 0, true, false, false, false, 1)
DIAG(err_ucn_control_character, CLASS_ERROR, diag::MAP_ERROR, "universal character name refers to a control character", 0, true, false, false, false, 1)
DIAG(err_ucn_escape_basic_scs, CLASS_ERROR, diag::MAP_ERROR, "character '%0' cannot be specified by a universal character name", 0, true, false, false, false, 1)
DIAG(err_ucn_escape_incomplete, CLASS_ERROR, diag::MAP_ERROR, "incomplete universal character name", 0, true, false, false, false, 1)
DIAG(err_ucn_escape_invalid, CLASS_ERROR, diag::MAP_ERROR, "invalid universal character", 0, true, false, false, false, 1)
DIAG(err_ucn_escape_no_digits, CLASS_ERROR, diag::MAP_ERROR, "\\u used with no following hex digits", 0, true, false, false, false, 1)
DIAG(err_unsupported_string_concat, CLASS_ERROR, diag::MAP_ERROR, "unsupported non-standard concatenation of string literals", 0, true, false, false, false, 1)
DIAG(err_unterm_macro_invoc, CLASS_ERROR, diag::MAP_ERROR, "unterminated function-like macro invocation", 0, true, false, false, false, 1)
DIAG(err_unterminated___pragma, CLASS_ERROR, diag::MAP_ERROR, "missing terminating ')' character", 0, true, false, false, false, 1)
DIAG(err_unterminated_block_comment, CLASS_ERROR, diag::MAP_ERROR, "unterminated /* comment", 0, true, false, false, false, 1)
DIAG(err_unterminated_raw_string, CLASS_ERROR, diag::MAP_ERROR, "raw string missing terminating delimiter )%0\"", 0, true, false, false, false, 1)
DIAG(err_warning_check_malformed, CLASS_ERROR, diag::MAP_ERROR, "builtin warning check macro requires a parenthesized string", 152, true, false, false, false, 1)
DIAG(escaped_newline_block_comment_end, CLASS_WARNING, diag::MAP_WARNING, "escaped newline between */ characters at block comment end", 55, true, false, false, false, 1)
DIAG(ext_bcpl_comment, CLASS_EXTENSION, diag::MAP_IGNORE, "// comments are not allowed in this language", 55, true, false, false, false, 1)
DIAG(ext_binary_literal, CLASS_EXTENSION, diag::MAP_IGNORE, "binary integer literals are an extension", 0, true, false, false, false, 1)
DIAG(ext_c99_whitespace_required_after_macro_name, CLASS_EXTENSION, diag::MAP_WARNING, "ISO C99 requires whitespace after the macro name", 50, true, false, false, false, 1)
DIAG(ext_charize_microsoft, CLASS_EXTENSION, diag::MAP_IGNORE, "@# is a microsoft extension", 154, true, false, false, false, 1)
DIAG(ext_dollar_in_identifier, CLASS_EXTENSION, diag::MAP_IGNORE, "'$' in identifier", 85, true, false, false, false, 1)
DIAG(ext_embedded_directive, CLASS_EXTENSION, diag::MAP_IGNORE, "embedding a directive within macro arguments has undefined behavior", 90, true, false, false, false, 1)
DIAG(ext_empty_fnmacro_arg, CLASS_EXTENSION, diag::MAP_IGNORE, "empty macro arguments were standardized in C99", 0, true, false, false, false, 1)
DIAG(ext_four_char_character_literal, CLASS_EXTENSION, diag::MAP_IGNORE, "multi-character character constant", 109, true, false, false, false, 1)
DIAG(ext_hexconstant_invalid, CLASS_EXTENSION, diag::MAP_IGNORE, "hexadecimal floating constants are a C99 feature", 0, true, false, false, false, 1)
DIAG(ext_imaginary_constant, CLASS_EXTENSION, diag::MAP_IGNORE, "imaginary constants are an extension", 0, true, false, false, false, 1)
DIAG(ext_missing_varargs_arg, CLASS_EXTENSION, diag::MAP_IGNORE, "varargs argument missing, but tolerated as an extension", 0, true, false, false, false, 1)
DIAG(ext_missing_whitespace_after_macro_name, CLASS_EXTENSION, diag::MAP_WARNING, "whitespace required after macro name", 0, true, false, false, false, 1)
DIAG(ext_ms_reserved_user_defined_literal, CLASS_EXTENSION, diag::MAP_WARNING, "invalid suffix on literal; C++11 requires a space between literal and identifier", 218, true, false, false, false, 1)
DIAG(ext_multi_line_bcpl_comment, CLASS_EXTENSION, diag::MAP_IGNORE, "multi-line // comment", 55, true, false, false, false, 1)
DIAG(ext_multichar_character_literal, CLASS_EXTENSION, diag::MAP_WARNING, "multi-character character constant", 168, true, false, false, false, 1)
DIAG(ext_named_variadic_macro, CLASS_EXTENSION, diag::MAP_IGNORE, "named variadic macros are a GNU extension", 299, true, false, false, false, 1)
DIAG(ext_no_newline_eof, CLASS_EXTENSION, diag::MAP_IGNORE, "no newline at end of file", 171, true, false, false, false, 1)
DIAG(ext_nonstandard_escape, CLASS_EXTENSION, diag::MAP_IGNORE, "use of non-standard escape character '\\%0'", 0, true, false, false, false, 1)
DIAG(ext_on_off_switch_syntax, CLASS_EXTENSION, diag::MAP_WARNING, "expected 'ON' or 'OFF' or 'DEFAULT' in pragma", 277, true, false, false, false, 1)
DIAG(ext_paste_comma, CLASS_EXTENSION, diag::MAP_IGNORE, "Use of comma pasting extension is non-portable", 0, true, false, false, false, 1)
DIAG(ext_pp_bad_vaargs_use, CLASS_EXTENSION, diag::MAP_IGNORE, "__VA_ARGS__ can only appear in the expansion of a C99 variadic macro", 0, true, false, false, false, 1)
DIAG(ext_pp_comma_expr, CLASS_EXTENSION, diag::MAP_IGNORE, "comma operator in operand of #if", 0, true, false, false, false, 1)
DIAG(ext_pp_extra_tokens_at_eol, CLASS_EXTENSION, diag::MAP_WARNING, "extra tokens at end of #%0 directive", 97, true, false, false, false, 1)
DIAG(ext_pp_ident_directive, CLASS_EXTENSION, diag::MAP_IGNORE, "#ident is a language extension", 0, true, false, false, false, 1)
DIAG(ext_pp_import_directive, CLASS_EXTENSION, diag::MAP_IGNORE, "#import is a language extension", 124, true, false, false, false, 1)
DIAG(ext_pp_include_next_directive, CLASS_EXTENSION, diag::MAP_IGNORE, "#include_next is a language extension", 0, true, false, false, false, 1)
DIAG(ext_pp_line_too_big, CLASS_EXTENSION, diag::MAP_IGNORE, "C requires #line number to be less than %0, allowed as extension", 0, true, false, false, false, 1)
DIAG(ext_pp_macro_redef, CLASS_EXTENSION, diag::MAP_WARNING, "%0 macro redefined", 0, true, false, false, false, 1)
DIAG(ext_pp_warning_directive, CLASS_EXTENSION, diag::MAP_IGNORE, "#warning is a language extension", 0, true, false, false, false, 1)
DIAG(ext_pragma_syntax_eod, CLASS_EXTENSION, diag::MAP_WARNING, "expected end of directive in pragma", 277, true, false, false, false, 1)
DIAG(ext_reserved_user_defined_literal, CLASS_EXTENSION, diag::MAP_ERROR, "invalid suffix on literal; C++11 requires a space between literal and identifier", 218, true, false, false, false, 1)
DIAG(ext_stdc_pragma_ignored, CLASS_EXTENSION, diag::MAP_WARNING, "unknown pragma in STDC namespace", 277, true, false, false, false, 1)
DIAG(ext_string_too_long, CLASS_EXTENSION, diag::MAP_IGNORE, "string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support", 200, true, false, false, false, 1)
DIAG(ext_token_used, CLASS_EXTENSION, diag::MAP_IGNORE, "extension used", 143, true, false, false, false, 1)
DIAG(ext_unknown_escape, CLASS_EXTENSION, diag::MAP_WARNING, "unknown escape sequence '\\%0'", 0, true, false, false, false, 1)
DIAG(ext_variadic_macro, CLASS_EXTENSION, diag::MAP_IGNORE, "variadic macros were introduced in C99", 299, true, false, false, false, 1)
DIAG(note_mmap_lbrace_match, CLASS_NOTE, diag::MAP_FATAL, "to match this '{'", 0, true, false, false, false, 1)
DIAG(note_mmap_lsquare_match, CLASS_NOTE, diag::MAP_FATAL, "to match this ']'", 0, true, false, false, false, 1)
DIAG(note_mmap_prev_definition, CLASS_NOTE, diag::MAP_FATAL, "previously defined here", 0, true, false, false, false, 1)
DIAG(null_in_char, CLASS_WARNING, diag::MAP_WARNING, "null character(s) preserved in character literal", 179, true, false, false, false, 1)
DIAG(null_in_file, CLASS_WARNING, diag::MAP_WARNING, "null character ignored", 179, true, false, false, false, 1)
DIAG(null_in_string, CLASS_WARNING, diag::MAP_WARNING, "null character(s) preserved in string literal", 179, true, false, false, false, 1)
DIAG(pp_disabled_macro_expansion, CLASS_WARNING, diag::MAP_IGNORE, "disabled expansion of recursive macro", 80, true, false, false, false, 1)
DIAG(pp_err_elif_after_else, CLASS_ERROR, diag::MAP_ERROR, "#elif after #else", 0, true, false, false, false, 1)
DIAG(pp_err_elif_without_if, CLASS_ERROR, diag::MAP_ERROR, "#elif without #if", 0, true, false, false, false, 1)
DIAG(pp_err_else_after_else, CLASS_ERROR, diag::MAP_ERROR, "#else after #else", 0, true, false, false, false, 1)
DIAG(pp_err_else_without_if, CLASS_ERROR, diag::MAP_ERROR, "#else without #if", 0, true, false, false, false, 1)
DIAG(pp_hash_warning, CLASS_WARNING, diag::MAP_WARNING, "%0", 2, true, false, false, true, 17)
DIAG(pp_include_macros_out_of_predefines, CLASS_ERROR, diag::MAP_ERROR, "the #__include_macros directive is only for internal use by -imacros", 0, true, false, false, false, 1)
DIAG(pp_include_next_absolute_path, CLASS_WARNING, diag::MAP_WARNING, "#include_next with absolute path", 0, true, false, false, false, 1)
DIAG(pp_include_next_in_primary, CLASS_WARNING, diag::MAP_WARNING, "#include_next in primary source file", 0, true, false, false, false, 1)
DIAG(pp_invalid_string_literal, CLASS_WARNING, diag::MAP_WARNING, "invalid string literal, ignoring final '\\'", 0, true, false, false, false, 1)
DIAG(pp_macro_not_used, CLASS_WARNING, diag::MAP_IGNORE, "macro is not used", 291, true, false, false, false, 1)
DIAG(pp_out_of_date_dependency, CLASS_WARNING, diag::MAP_WARNING, "current file is older than dependency %0", 0, true, false, false, false, 1)
DIAG(pp_poisoning_existing_macro, CLASS_WARNING, diag::MAP_WARNING, "poisoning existing macro", 0, true, false, false, false, 1)
DIAG(pp_pragma_once_in_main_file, CLASS_WARNING, diag::MAP_WARNING, "#pragma once in main file", 0, true, false, false, false, 1)
DIAG(pp_pragma_sysheader_in_main_file, CLASS_WARNING, diag::MAP_WARNING, "#pragma system_header ignored in main file", 0, true, false, false, false, 1)
DIAG(pp_redef_builtin_macro, CLASS_WARNING, diag::MAP_WARNING, "redefining builtin macro", 34, true, false, false, false, 1)
DIAG(pp_undef_builtin_macro, CLASS_WARNING, diag::MAP_WARNING, "undefining builtin macro", 0, true, false, false, false, 1)
DIAG(trigraph_converted, CLASS_WARNING, diag::MAP_WARNING, "trigraph converted to '%0' character", 267, true, false, false, false, 1)
DIAG(trigraph_ends_block_comment, CLASS_WARNING, diag::MAP_WARNING, "trigraph ends block comment", 267, true, false, false, false, 1)
DIAG(trigraph_ignored, CLASS_WARNING, diag::MAP_WARNING, "trigraph ignored", 267, true, false, false, false, 1)
DIAG(trigraph_ignored_block_comment, CLASS_WARNING, diag::MAP_WARNING, "ignored trigraph would end block comment", 267, true, false, false, false, 1)
DIAG(warn_auto_module_import, CLASS_WARNING, diag::MAP_IGNORE, "treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'", 24, true, false, false, false, 1)
DIAG(warn_bad_character_encoding, CLASS_EXTENSION, diag::MAP_WARNING, "illegal character encoding in character literal", 139, true, false, false, false, 1)
DIAG(warn_bad_string_encoding, CLASS_EXTENSION, diag::MAP_WARNING, "illegal character encoding in string literal", 139, true, false, false, false, 1)
DIAG(warn_char_constant_too_large, CLASS_WARNING, diag::MAP_WARNING, "character constant too long for its type", 0, true, false, false, false, 1)
DIAG(warn_cxx11_compat_reserved_user_defined_literal, CLASS_WARNING, diag::MAP_IGNORE, "identifier after literal will be treated as a reserved user-defined literal suffix in C++11", 41, true, false, false, false, 1)
DIAG(warn_cxx11_compat_user_defined_literal, CLASS_WARNING, diag::MAP_IGNORE, "identifier after literal will be treated as a user-defined literal suffix in C++11", 40, true, false, false, false, 1)
DIAG(warn_cxx11_keyword, CLASS_WARNING, diag::MAP_IGNORE, "'%0' is a keyword in C++11", 40, true, false, false, false, 1)
DIAG(warn_cxx98_compat_empty_fnmacro_arg, CLASS_WARNING, diag::MAP_IGNORE, "empty macro argument list is incompatible with C++98", 47, true, false, false, false, 1)
DIAG(warn_cxx98_compat_less_colon_colon, CLASS_WARNING, diag::MAP_IGNORE, "'<::' is treated as digraph '<:' (aka '[') followed by ':' in C++98", 44, true, false, false, false, 1)
DIAG(warn_cxx98_compat_literal_ucn_control_character, CLASS_WARNING, diag::MAP_IGNORE, "universal character name referring to a control character is incompatible with C++98", 44, true, false, false, false, 1)
DIAG(warn_cxx98_compat_literal_ucn_escape_basic_scs, CLASS_WARNING, diag::MAP_IGNORE, "specifying character '%0' with a universal character name is incompatible with C++98", 44, true, false, false, false, 1)
DIAG(warn_cxx98_compat_no_newline_eof, CLASS_WARNING, diag::MAP_IGNORE, "C++98 requires newline at end of file", 47, true, false, false, false, 1)
DIAG(warn_cxx98_compat_pp_line_too_big, CLASS_WARNING, diag::MAP_IGNORE, "#line number greater than 32767 is incompatible with C++98", 47, true, false, false, false, 1)
DIAG(warn_cxx98_compat_raw_string_literal, CLASS_WARNING, diag::MAP_IGNORE, "raw string literals are incompatible with C++98", 44, true, false, false, false, 1)
DIAG(warn_cxx98_compat_unicode_literal, CLASS_WARNING, diag::MAP_IGNORE, "unicode literals are incompatible with C++98", 44, true, false, false, false, 1)
DIAG(warn_cxx98_compat_variadic_macro, CLASS_WARNING, diag::MAP_IGNORE, "variadic macros are incompatible with C++98", 47, true, false, false, false, 1)
DIAG(warn_extraneous_char_constant, CLASS_WARNING, diag::MAP_WARNING, "extraneous characters in character constant ignored", 0, true, false, false, false, 1)
DIAG(warn_has_warning_invalid_option, CLASS_EXTENSION, diag::MAP_WARNING, "__has_warning expected option name (e.g. \"-Wundef\")", 152, true, false, false, false, 1)
DIAG(warn_hex_escape_too_large, CLASS_EXTENSION, diag::MAP_WARNING, "hex escape sequence out of range", 0, true, false, false, false, 1)
DIAG(warn_missing_whitespace_after_macro_name, CLASS_WARNING, diag::MAP_WARNING, "whitespace recommended after macro name", 0, true, false, false, false, 1)
DIAG(warn_mmap_unknown_attribute, CLASS_WARNING, diag::MAP_WARNING, "unknown attribute '%0'", 117, true, false, false, false, 1)
DIAG(warn_nested_block_comment, CLASS_WARNING, diag::MAP_WARNING, "'/*' within block comment", 55, true, false, false, false, 1)
DIAG(warn_octal_escape_too_large, CLASS_EXTENSION, diag::MAP_WARNING, "octal escape sequence out of range", 0, true, false, false, false, 1)
DIAG(warn_pp_convert_lhs_to_positive, CLASS_WARNING, diag::MAP_WARNING, "left side of operator converted from negative value to unsigned: %0", 0, true, false, false, false, 1)
DIAG(warn_pp_convert_rhs_to_positive, CLASS_WARNING, diag::MAP_WARNING, "right side of operator converted from negative value to unsigned: %0", 0, true, false, false, false, 1)
DIAG(warn_pp_expr_overflow, CLASS_WARNING, diag::MAP_WARNING, "integer overflow in preprocessor expression", 0, true, false, false, false, 1)
DIAG(warn_pp_line_decimal, CLASS_WARNING, diag::MAP_WARNING, "#line directive interprets number as decimal, not octal", 0, true, false, false, false, 1)
DIAG(warn_pp_undef_identifier, CLASS_WARNING, diag::MAP_IGNORE, "%0 is not defined, evaluates to 0", 272, true, false, false, false, 1)
DIAG(warn_pragma_debug_unexpected_command, CLASS_WARNING, diag::MAP_WARNING, "unexpected debug command '%0'", 0, true, false, false, false, 1)
DIAG(warn_pragma_diagnostic_cannot_pop, CLASS_EXTENSION, diag::MAP_WARNING, "pragma diagnostic pop could not pop, no matching push", 277, true, false, false, false, 1)
DIAG(warn_pragma_diagnostic_invalid, CLASS_EXTENSION, diag::MAP_WARNING, "pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'", 277, true, false, false, false, 1)
DIAG(warn_pragma_diagnostic_invalid_option, CLASS_EXTENSION, diag::MAP_WARNING, "pragma diagnostic expected option name (e.g. \"-Wundef\")", 277, true, false, false, false, 1)
DIAG(warn_pragma_diagnostic_invalid_token, CLASS_EXTENSION, diag::MAP_WARNING, "unexpected token in pragma diagnostic", 277, true, false, false, false, 1)
DIAG(warn_pragma_diagnostic_unknown_warning, CLASS_EXTENSION, diag::MAP_WARNING, "unknown warning group '%0', ignored", 277, true, false, false, false, 1)
DIAG(warn_pragma_ignored, CLASS_WARNING, diag::MAP_IGNORE, "unknown pragma ignored", 277, true, false, false, false, 1)
DIAG(warn_pragma_include_alias_expected, CLASS_EXTENSION, diag::MAP_WARNING, "pragma include_alias expected '%0'", 277, true, false, false, false, 1)
DIAG(warn_pragma_include_alias_expected_filename, CLASS_EXTENSION, diag::MAP_WARNING, "pragma include_alias expected include filename", 277, true, false, false, false, 1)
DIAG(warn_pragma_include_alias_mismatch_angle, CLASS_EXTENSION, diag::MAP_WARNING, "angle-bracketed include <%0> cannot be aliased to double-quoted include \"%1\"", 277, true, false, false, false, 1)
DIAG(warn_pragma_include_alias_mismatch_quote, CLASS_EXTENSION, diag::MAP_WARNING, "double-quoted include \"%0\" cannot be aliased to angle-bracketed include <%1>", 277, true, false, false, false, 1)
DIAG(warn_pragma_message, CLASS_WARNING, diag::MAP_WARNING, "%0", 1, true, false, true, false, 21)
DIAG(warn_pragma_pop_macro_no_push, CLASS_WARNING, diag::MAP_WARNING, "pragma pop_macro could not pop '%0', no matching push_macro", 0, true, false, false, false, 1)
DIAG(warn_stdc_fenv_access_not_supported, CLASS_WARNING, diag::MAP_WARNING, "pragma STDC FENV_ACCESS ON is not supported, ignoring pragma", 277, true, false, false, false, 1)
DIAG(warn_ucn_not_valid_in_c89, CLASS_EXTENSION, diag::MAP_WARNING, "unicode escape sequences are only valid in C99 or C++", 275, true, false, false, false, 1)
DIAG(warn_uncovered_module_header, CLASS_WARNING, diag::MAP_WARNING, "umbrella header does not include header '%0'", 127, true, false, false, false, 1)
DIAG(warn_unterminated_char, CLASS_EXTENSION, diag::MAP_WARNING, "missing terminating ' character", 0, true, false, false, false, 1)
DIAG(warn_unterminated_string, CLASS_EXTENSION, diag::MAP_WARNING, "missing terminating '\"' character", 0, true, false, false, false, 1)
